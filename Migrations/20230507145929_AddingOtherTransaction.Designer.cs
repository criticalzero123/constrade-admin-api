// <auto-generated />
using System;
using ConstradeApi_Admin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConstradeApi_Admin.Migrations
{
    [DbContext(typeof(AdminDataContext))]
    [Migration("20230507145929_AddingOtherTransaction")]
    partial class AddingOtherTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Address", b =>
                {
                    b.Property<int>("Address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Address_id"));

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("House_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Postal_code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Updated_at")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Address_id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.BoostProduct", b =>
                {
                    b.Property<int>("BoostProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("boost_product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BoostProductId"));

                    b.Property<DateTime>("DateBoosted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_boosted");

                    b.Property<DateTime>("DateTimeExpired")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time_expired");

                    b.Property<int>("DaysBoosted")
                        .HasColumnType("integer")
                        .HasColumnName("days_boosted");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("BoostProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("boost_product");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Community", b =>
                {
                    b.Property<int>("CommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("community_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OwnerUserId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_user_id");

                    b.Property<int>("TotalMembers")
                        .HasColumnType("integer")
                        .HasColumnName("total_members");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("CommunityId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("community");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.CommunityPost", b =>
                {
                    b.Property<int>("CommunityPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("community_post_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityPostId"));

                    b.Property<int>("CommunityId")
                        .HasColumnType("integer")
                        .HasColumnName("community_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Like")
                        .HasColumnType("integer")
                        .HasColumnName("like_count");

                    b.Property<int>("PosterUserId")
                        .HasColumnType("integer")
                        .HasColumnName("poster_user_id");

                    b.HasKey("CommunityPostId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("PosterUserId");

                    b.ToTable("community_post");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.CommunityPostComment", b =>
                {
                    b.Property<int>("CommunityPostCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("community_post_comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommunityPostCommentId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CommentedByUser")
                        .HasColumnType("integer")
                        .HasColumnName("commented_by_user");

                    b.Property<int>("CommunityPostId")
                        .HasColumnType("integer")
                        .HasColumnName("community_post_id");

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_commented");

                    b.HasKey("CommunityPostCommentId");

                    b.HasIndex("CommentedByUser");

                    b.HasIndex("CommunityPostId");

                    b.ToTable("community_post_comment");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.OtherTransaction", b =>
                {
                    b.Property<int>("OtherTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("other_transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OtherTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transction_type");

                    b.Property<int>("WalletId")
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    b.HasKey("OtherTransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("other_transaction");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Person", b =>
                {
                    b.Property<int>("Person_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Person_id"));

                    b.Property<int?>("AddressRef_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Person_id");

                    b.HasIndex("AddressRef_id");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("person");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("Cash")
                        .HasColumnType("numeric")
                        .HasColumnName("cash");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("condition");

                    b.Property<int>("CountFavorite")
                        .HasColumnType("integer")
                        .HasColumnName("count_favorite");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("GameGenre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("game_genre");

                    b.Property<bool>("HasReceipts")
                        .HasColumnType("boolean")
                        .HasColumnName("has_receipts");

                    b.Property<bool>("HasWarranty")
                        .HasColumnType("boolean")
                        .HasColumnName("has_warranty");

                    b.Property<bool>("IsDeliver")
                        .HasColumnType("boolean")
                        .HasColumnName("is_delivery");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_generated");

                    b.Property<bool>("IsMeetup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_meetup");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("item");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("ModelNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model_number");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("platform");

                    b.Property<int>("PosterUserId")
                        .HasColumnType("integer")
                        .HasColumnName("poster_user_id");

                    b.Property<string>("PreferTrade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("prefer_trade");

                    b.Property<string>("ProductStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("product_status");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("serial_number");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("ProductId");

                    b.HasIndex("PosterUserId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("reportId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_submitted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IdReported")
                        .HasColumnType("integer")
                        .HasColumnName("id_reported");

                    b.Property<int>("ReportType")
                        .HasColumnType("integer")
                        .HasColumnName("report_type");

                    b.Property<int>("ReportedBy")
                        .HasColumnType("integer")
                        .HasColumnName("reported_by");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportedBy");

                    b.ToTable("report");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint")
                        .HasColumnName("rate");

                    b.Property<int>("TransactionRefId")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_ref_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("TransactionRefId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.SendMoneyTransaction", b =>
                {
                    b.Property<int>("SendMoneyTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("send_money_transaction");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SendMoneyTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateSend")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_send");

                    b.Property<int>("ReceiverWalletId")
                        .HasColumnType("integer")
                        .HasColumnName("receiver_wallet_id");

                    b.Property<int>("SenderWalletId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_wallet_id");

                    b.HasKey("SendMoneyTransactionId");

                    b.HasIndex("ReceiverWalletId");

                    b.HasIndex("SenderWalletId");

                    b.ToTable("send_money_transaction");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscriptionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subscription_type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("subscription");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.SubscriptionHistory", b =>
                {
                    b.Property<int>("SubscriptionHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subscription_history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscriptionHistoryId"));

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<decimal>("NewAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("new_amount");

                    b.Property<DateTime>("NewDateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("new_date_end");

                    b.Property<DateTime>("NewDateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("new_date_start");

                    b.Property<string>("NewSubscriptionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("new_subscription_type");

                    b.Property<decimal>("PreviousAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("previous_amount");

                    b.Property<DateTime>("PreviousDateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("previous_date_end");

                    b.Property<DateTime>("PreviousDateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("previous_date_start");

                    b.Property<string>("PreviousSubscriptionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("previous_subscription_type");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.HasKey("SubscriptionHistoryId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("subscription_history");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.SystemFeedback", b =>
                {
                    b.Property<int>("SystemFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("system_feedback_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SystemFeedbackId"));

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_submitted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("character varying(155)")
                        .HasColumnName("description");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("report_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("SystemFeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("system_feedback");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("BuyerUserId")
                        .HasColumnType("integer")
                        .HasColumnName("buyer_user_id");

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_transaction");

                    b.Property<bool>("GetWanted")
                        .HasColumnType("boolean")
                        .HasColumnName("get_wanted");

                    b.Property<bool>("InAppTransaction")
                        .HasColumnType("boolean")
                        .HasColumnName("in_app_transaction");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_reviewed");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("SellerUserId")
                        .HasColumnType("integer")
                        .HasColumnName("seller_user_id");

                    b.HasKey("TransactionId");

                    b.HasIndex("BuyerUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerUserId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("AuthProviderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("auth_provider_type");

                    b.Property<int>("CountPost")
                        .HasColumnType("integer")
                        .HasColumnName("count_post");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<DateTime>("LastActiveAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_active_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<int>("PersonRefId")
                        .HasColumnType("integer")
                        .HasColumnName("person_ref_id");

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("user_status");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("user_type");

                    b.HasKey("UserId");

                    b.HasIndex("PersonRefId");

                    b.HasIndex("Email", "FirebaseId")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.UserDeactivate", b =>
                {
                    b.Property<int>("UserDeactivateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_deactivate_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserDeactivateId"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_started");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserDeactivateId");

                    b.HasIndex("UserId");

                    b.ToTable("user_deactivate");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.UserNotification", b =>
                {
                    b.Property<int>("UserNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserNotificationId"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("notification_date");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_message");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("ToId")
                        .HasColumnType("integer")
                        .HasColumnName("to_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("UserNotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("user_notification");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("wallet_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.ToTable("user_wallet");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.BoostProduct", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Community", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.CommunityPost", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("PosterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.CommunityPostComment", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("CommentedByUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstradeApi_Admin.Entity.CommunityPost", "Post")
                        .WithMany()
                        .HasForeignKey("CommunityPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.OtherTransaction", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Person", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressRef_id");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Product", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("PosterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Report", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("ReportedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Review", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.SendMoneyTransaction", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Wallet", "Wallet2")
                        .WithMany()
                        .HasForeignKey("ReceiverWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstradeApi_Admin.Entity.Wallet", "Wallet1")
                        .WithMany()
                        .HasForeignKey("SenderWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet1");

                    b.Navigation("Wallet2");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Subscription", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.SubscriptionHistory", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.SystemFeedback", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Transaction", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstradeApi_Admin.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstradeApi_Admin.Entity.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.User", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.UserDeactivate", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.UserNotification", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConstradeApi_Admin.Entity.Wallet", b =>
                {
                    b.HasOne("ConstradeApi_Admin.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
